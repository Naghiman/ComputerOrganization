
P:/G05_lab3/basic_io.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 a8 07 00 00 ac 07 00 00 b0 07 00 00     @...............
  30:	b4 07 00 00 a4 07 00 00 b8 07 00 00 bc 07 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000199 	bl	740 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	000008a4 	.word	0x000008a4

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000ce0 	.word	0x00000ce0

00000124 <__cs3_heap_start_ptr>:
 124:	00000d08 	.word	0x00000d08

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000ce8 	.word	0x00000ce8
 170:	00000ceb 	.word	0x00000ceb
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000ce8 	.word	0x00000ce8
 1bc:	00000ce8 	.word	0x00000ce8
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000ce8 	.word	0x00000ce8
 200:	00000000 	.word	0x00000000
 204:	00000848 	.word	0x00000848

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000848 	.word	0x00000848
 250:	00000cec 	.word	0x00000cec
 254:	000008a8 	.word	0x000008a8
 258:	00000000 	.word	0x00000000

0000025c <main>:
#include "./drivers/inc/LEDs.h"
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/pushbuttons.h"

int main(){
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd010 	sub	sp, sp, #16
	int sw_data;
	int pb_data;

	while (1){
		// Read Slide Switch
		sw_input = read_slider_switches_ASM();
 268:	eb00001d 	bl	2e4 <read_slider_switches_ASM>
 26c:	e50b0008 	str	r0, [r11, #-8]

		// Turn on LEDs per flipped switch
        //write_LEDs_ASM(sw_input);

		// Read Push Button
		pb_data = read_PB_data_ASM();
 270:	eb00005c 	bl	3e8 <read_PB_data_ASM>
 274:	e50b000c 	str	r0, [r11, #-12]
		
		//Clear Display if SW9 is flipped
		if ((sw_input & 0x200) == 0x200){
 278:	e51b3008 	ldr	r3, [r11, #-8]
 27c:	e2033c02 	and	r3, r3, #512	; 0x200
 280:	e3530000 	cmp	r3, #0
 284:	0a000002 	beq	294 <main+0x38>
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
 288:	e3a0003f 	mov	r0, #63	; 0x3f
 28c:	eb000018 	bl	2f4 <HEX_clear_ASM>
		//HEX_clear_ASM(HEX0 | HEX1);
		
		//continue;
		    
		//else {HEX_flood_ASM(HEX1);}
	}
 290:	eafffff4 	b	268 <main+0xc>
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
		}
		else {
		
		//The last 4 switch selection operation
        sw_data = sw_input & 0x0F;
 294:	e51b3008 	ldr	r3, [r11, #-8]
 298:	e203300f 	and	r3, r3, #15
 29c:	e50b3010 	str	r3, [r11, #-16]
		
        //Switch on HEX displays for each corresponding button that is pressed
		HEX_write_ASM(pb_data, sw_data);
 2a0:	e51b300c 	ldr	r3, [r11, #-12]
 2a4:	e6ef2073 	uxtb	r2, r3
 2a8:	e51b3010 	ldr	r3, [r11, #-16]
 2ac:	e6ef3073 	uxtb	r3, r3
 2b0:	e1a00002 	mov	r0, r2
 2b4:	e1a01003 	mov	r1, r3
 2b8:	eb00001b 	bl	32c <HEX_write_ASM>
				
        // HEX4 and HEX5 are flooded by default
		HEX_flood_ASM(HEX4 | HEX5);
 2bc:	e3a00030 	mov	r0, #48	; 0x30
 2c0:	eb000012 	bl	310 <HEX_flood_ASM>
		//HEX_clear_ASM(HEX0 | HEX1);
		
		//continue;
		    
		//else {HEX_flood_ASM(HEX1);}
	}
 2c4:	eaffffe7 	b	268 <main+0xc>

000002c8 <read_LEDs_ASM>:
	.equ LED_BASE, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM:
	LDR R1, = LED_BASE
 2c8:	e59f1010 	ldr	r1, [pc, #16]	; 2e0 <write_LEDs_ASM+0xc>
	LDR R0, [R1]
 2cc:	e5910000 	ldr	r0, [r1]
	BX LR
 2d0:	e12fff1e 	bx	lr

000002d4 <write_LEDs_ASM>:

	//.end

write_LEDs_ASM:
	LDR R1, = LED_BASE
 2d4:	e59f1004 	ldr	r1, [pc, #4]	; 2e0 <write_LEDs_ASM+0xc>
	STR R0, [R1]	//store
 2d8:	e5810000 	str	r0, [r1]
	BX LR
 2dc:	e12fff1e 	bx	lr
	.equ LED_BASE, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM:
	LDR R1, = LED_BASE
 2e0:	ff200000 	.word	0xff200000

000002e4 <read_slider_switches_ASM>:
.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, = SW_BASE
 2e4:	e59f1004 	ldr	r1, [pc, #4]	; 2f0 <read_slider_switches_ASM+0xc>
	LDR R0, [R1]
 2e8:	e5910000 	ldr	r0, [r1]
	BX LR
 2ec:	e12fff1e 	bx	lr
.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, = SW_BASE
 2f0:	ff200040 	.word	0xff200040

000002f4 <HEX_clear_ASM>:
            .global HEX_clear_ASM
            .global HEX_flood_ASM
            .global HEX_write_ASM

HEX_clear_ASM:
			MOV 	R2, #6	//loop counter
 2f4:	e3a02006 	mov	r2, #6
			MOV 	R4, #1	//bit identifier
 2f8:	e3a04001 	mov	r4, #1
			LDR		R6, =HEX0_3_BASE
 2fc:	e59f60d8 	ldr	r6, [pc, #216]	; 3dc <Value+0x10>
			LDR 	R7, =HEX4_5_BASE
 300:	e59f70d8 	ldr	r7, [pc, #216]	; 3e0 <Value+0x14>
			MOV		R3, #0x00
 304:	e3a03000 	mov	r3, #0
			PUSH	{LR}        
 308:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
			B		Flag                
 30c:	ea00000e 	b	34c <Flag>

00000310 <HEX_flood_ASM>:

HEX_flood_ASM:
			MOV 	R2, #6	//loop counter
 310:	e3a02006 	mov	r2, #6
			MOV 	R4, #1	//bit identifier
 314:	e3a04001 	mov	r4, #1
			LDR		R6, =HEX0_3_BASE
 318:	e59f60bc 	ldr	r6, [pc, #188]	; 3dc <Value+0x10>
			LDR 	R7, =HEX4_5_BASE
 31c:	e59f70bc 	ldr	r7, [pc, #188]	; 3e0 <Value+0x14>
			MOV		R3, #0x7F
 320:	e3a0307f 	mov	r3, #127	; 0x7f
			PUSH	{LR}        
 324:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
			B		Flag
 328:	ea000007 	b	34c <Flag>

0000032c <HEX_write_ASM>:
        
HEX_write_ASM:
			MOV 	R2, #6	//loop counter
 32c:	e3a02006 	mov	r2, #6
			MOV 	R4, #1	//bit identifier
 330:	e3a04001 	mov	r4, #1
			LDR		R6, =HEX0_3_BASE
 334:	e59f60a0 	ldr	r6, [pc, #160]	; 3dc <Value+0x10>
			LDR 	R7, =HEX4_5_BASE
 338:	e59f70a0 	ldr	r7, [pc, #160]	; 3e0 <Value+0x14>
            LDR     R5, =Value
 33c:	e59f50a0 	ldr	r5, [pc, #160]	; 3e4 <Value+0x18>
			LDRB	R3, [R5, R1]       
 340:	e7d53001 	ldrb	r3, [r5, r1]
			PUSH	{LR}        
 344:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
			B		Flag
 348:	eaffffff 	b	34c <Flag>

0000034c <Flag>:
			            			
Flag:		TST 	R0, R4
 34c:	e1100004 	tst	r0, r4
			BLNE	Identify
 350:	1b000005 	blne	36c <Identify>
			LSL 	R4, R4, #1
 354:	e1a04084 	lsl	r4, r4, #1
			SUBS	R2, R2, #1
 358:	e2522001 	subs	r2, r2, #1
			BEQ		Done
 35c:	0a000000 	beq	364 <Done>
			B		Flag
 360:	eafffff9 	b	34c <Flag>

00000364 <Done>:

Done:		POP		{LR}
 364:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
			BX		LR			
 368:	e12fff1e 	bx	lr

0000036c <Identify>:

Identify:	CMP		R2, #6
 36c:	e3520006 	cmp	r2, #6
			BEQ		Hex0
 370:	0a000009 	beq	39c <Hex0>
			CMP		R2, #5
 374:	e3520005 	cmp	r2, #5
			BEQ		Hex1
 378:	0a000009 	beq	3a4 <Hex1>
			CMP		R2, #4
 37c:	e3520004 	cmp	r2, #4
			BEQ		Hex2
 380:	0a000009 	beq	3ac <Hex2>
			CMP		R2, #3
 384:	e3520003 	cmp	r2, #3
			BEQ		Hex3
 388:	0a000009 	beq	3b4 <Hex3>
			CMP		R2, #2
 38c:	e3520002 	cmp	r2, #2
			BEQ		Hex4
 390:	0a000009 	beq	3bc <Hex4>
			CMP		R2, #1
 394:	e3520001 	cmp	r2, #1
			BEQ		Hex5
 398:	0a000009 	beq	3c4 <Hex5>

0000039c <Hex0>:

Hex0:		STRB	R3, [R6]
 39c:	e5c63000 	strb	r3, [r6]
			BX		LR
 3a0:	e12fff1e 	bx	lr

000003a4 <Hex1>:

Hex1:		STRB	R3, [R6, #1]
 3a4:	e5c63001 	strb	r3, [r6, #1]
			BX		LR
 3a8:	e12fff1e 	bx	lr

000003ac <Hex2>:

Hex2:		STRB	R3, [R6, #2]
 3ac:	e5c63002 	strb	r3, [r6, #2]
			BX		LR
 3b0:	e12fff1e 	bx	lr

000003b4 <Hex3>:

Hex3:		STRB	R3, [R6, #3]
 3b4:	e5c63003 	strb	r3, [r6, #3]
			BX		LR
 3b8:	e12fff1e 	bx	lr

000003bc <Hex4>:

Hex4:		STRB	R3, [R7]
 3bc:	e5c73000 	strb	r3, [r7]
			BX		LR
 3c0:	e12fff1e 	bx	lr

000003c4 <Hex5>:

Hex5:		STRB	R3, [R7, #1]
 3c4:	e5c73001 	strb	r3, [r7, #1]
			BX		LR
 3c8:	e12fff1e 	bx	lr

000003cc <Value>:
 3cc:	4f5b063f 	.word	0x4f5b063f
 3d0:	077d6d66 	.word	0x077d6d66
 3d4:	7f77677f 	.word	0x7f77677f
 3d8:	71793f39 	.word	0x71793f39
            .global HEX_write_ASM

HEX_clear_ASM:
			MOV 	R2, #6	//loop counter
			MOV 	R4, #1	//bit identifier
			LDR		R6, =HEX0_3_BASE
 3dc:	ff200020 	.word	0xff200020
			LDR 	R7, =HEX4_5_BASE
 3e0:	ff200030 	.word	0xff200030
HEX_write_ASM:
			MOV 	R2, #6	//loop counter
			MOV 	R4, #1	//bit identifier
			LDR		R6, =HEX0_3_BASE
			LDR 	R7, =HEX4_5_BASE
            LDR     R5, =Value
 3e4:	000003cc 	.word	0x000003cc

000003e8 <read_PB_data_ASM>:
	.global PB_clear_edgecap_ASM
	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM

read_PB_data_ASM:
	LDR R1, =PB_BASE
 3e8:	e59f1020 	ldr	r1, [pc, #32]	; 410 <disable_PB_INT_ASM+0x4>
	LDR R0, [R1]
 3ec:	e5910000 	ldr	r0, [r1]
	AND R0, R0, #0xF //get rid of all bits except first 4
 3f0:	e200000f 	and	r0, r0, #15
	BX LR
 3f4:	e12fff1e 	bx	lr

000003f8 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:

	BX LR
 3f8:	e12fff1e 	bx	lr

000003fc <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:

	BX LR
 3fc:	e12fff1e 	bx	lr

00000400 <PB_edgecap_is_pressed_ASM>:
PB_edgecap_is_pressed_ASM:

	BX LR
 400:	e12fff1e 	bx	lr

00000404 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:

	BX LR
 404:	e12fff1e 	bx	lr

00000408 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:

	BX LR
 408:	e12fff1e 	bx	lr

0000040c <disable_PB_INT_ASM>:

disable_PB_INT_ASM:

	BX LR
 40c:	e12fff1e 	bx	lr
	.global PB_clear_edgecap_ASM
	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM

read_PB_data_ASM:
	LDR R1, =PB_BASE
 410:	ff200050 	.word	0xff200050

00000414 <atexit>:
 414:	e1a01000 	mov	r1, r0
 418:	e3a00000 	mov	r0, #0
 41c:	e92d4008 	push	{r3, lr}
 420:	e1a02000 	mov	r2, r0
 424:	e1a03000 	mov	r3, r0
 428:	eb00000e 	bl	468 <__register_exitproc>
 42c:	e8bd4008 	pop	{r3, lr}
 430:	e12fff1e 	bx	lr

00000434 <exit>:
 434:	e92d4008 	push	{r3, lr}
 438:	e3a01000 	mov	r1, #0
 43c:	e1a04000 	mov	r4, r0
 440:	eb000045 	bl	55c <__call_exitprocs>
 444:	e59f3018 	ldr	r3, [pc, #24]	; 464 <exit+0x30>
 448:	e5930000 	ldr	r0, [r3]
 44c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 450:	e3530000 	cmp	r3, #0
 454:	11a0e00f 	movne	lr, pc
 458:	112fff13 	bxne	r3
 45c:	e1a00004 	mov	r0, r4
 460:	eb0000c9 	bl	78c <_exit>
 464:	0000084c 	.word	0x0000084c

00000468 <__register_exitproc>:
 468:	e59fc0e4 	ldr	r12, [pc, #228]	; 554 <__register_exitproc+0xec>
 46c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 470:	e59c4000 	ldr	r4, [r12]
 474:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 478:	e35c0000 	cmp	r12, #0
 47c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 480:	e59c5004 	ldr	r5, [r12, #4]
 484:	0584c148 	streq	r12, [r4, #328]	; 0x148
 488:	e355001f 	cmp	r5, #31
 48c:	e24dd010 	sub	sp, sp, #16
 490:	e1a06000 	mov	r6, r0
 494:	da000015 	ble	4f0 <__register_exitproc+0x88>
 498:	e59f00b8 	ldr	r0, [pc, #184]	; 558 <__register_exitproc+0xf0>
 49c:	e3500000 	cmp	r0, #0
 4a0:	1a000001 	bne	4ac <__register_exitproc+0x44>
 4a4:	e3e00000 	mvn	r0, #0
 4a8:	ea000018 	b	510 <__register_exitproc+0xa8>
 4ac:	e3a00e19 	mov	r0, #400	; 0x190
 4b0:	e58d100c 	str	r1, [sp, #12]
 4b4:	e58d2008 	str	r2, [sp, #8]
 4b8:	e58d3004 	str	r3, [sp, #4]
 4bc:	e320f000 	nop	{0}
 4c0:	e250c000 	subs	r12, r0, #0
 4c4:	e59d100c 	ldr	r1, [sp, #12]
 4c8:	e59d2008 	ldr	r2, [sp, #8]
 4cc:	e59d3004 	ldr	r3, [sp, #4]
 4d0:	0afffff3 	beq	4a4 <__register_exitproc+0x3c>
 4d4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 4d8:	e3a00000 	mov	r0, #0
 4dc:	e58c0004 	str	r0, [r12, #4]
 4e0:	e58c5000 	str	r5, [r12]
 4e4:	e584c148 	str	r12, [r4, #328]	; 0x148
 4e8:	e58c0188 	str	r0, [r12, #392]	; 0x188
 4ec:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 4f0:	e3560000 	cmp	r6, #0
 4f4:	e59c4004 	ldr	r4, [r12, #4]
 4f8:	1a000007 	bne	51c <__register_exitproc+0xb4>
 4fc:	e2843002 	add	r3, r4, #2
 500:	e2844001 	add	r4, r4, #1
 504:	e78c1103 	str	r1, [r12, r3, lsl #2]
 508:	e58c4004 	str	r4, [r12, #4]
 50c:	e3a00000 	mov	r0, #0
 510:	e28dd010 	add	sp, sp, #16
 514:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 518:	e12fff1e 	bx	lr
 51c:	e3a00001 	mov	r0, #1
 520:	e1a00410 	lsl	r0, r0, r4
 524:	e08c8104 	add	r8, r12, r4, lsl #2
 528:	e3560002 	cmp	r6, #2
 52c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 530:	e5883108 	str	r3, [r8, #264]	; 0x108
 534:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 538:	e1877000 	orr	r7, r7, r0
 53c:	01830000 	orreq	r0, r3, r0
 540:	e1a05008 	mov	r5, r8
 544:	e5882088 	str	r2, [r8, #136]	; 0x88
 548:	e58c7188 	str	r7, [r12, #392]	; 0x188
 54c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 550:	eaffffe9 	b	4fc <__register_exitproc+0x94>
 554:	0000084c 	.word	0x0000084c
 558:	00000000 	.word	0x00000000

0000055c <__call_exitprocs>:
 55c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 560:	e59f3168 	ldr	r3, [pc, #360]	; 6d0 <__call_exitprocs+0x174>
 564:	e5933000 	ldr	r3, [r3]
 568:	e24dd014 	sub	sp, sp, #20
 56c:	e58d3004 	str	r3, [sp, #4]
 570:	e2833f52 	add	r3, r3, #328	; 0x148
 574:	e58d0008 	str	r0, [sp, #8]
 578:	e58d300c 	str	r3, [sp, #12]
 57c:	e1a07001 	mov	r7, r1
 580:	e3a08001 	mov	r8, #1
 584:	e59d3004 	ldr	r3, [sp, #4]
 588:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 58c:	e3560000 	cmp	r6, #0
 590:	e59db00c 	ldr	r11, [sp, #12]
 594:	0a000033 	beq	668 <__call_exitprocs+0x10c>
 598:	e5965004 	ldr	r5, [r6, #4]
 59c:	e2554001 	subs	r4, r5, #1
 5a0:	5286a088 	addpl	r10, r6, #136	; 0x88
 5a4:	5285501f 	addpl	r5, r5, #31
 5a8:	508a5105 	addpl	r5, r10, r5, lsl #2
 5ac:	5a000007 	bpl	5d0 <__call_exitprocs+0x74>
 5b0:	ea000029 	b	65c <__call_exitprocs+0x100>
 5b4:	e5953000 	ldr	r3, [r5]
 5b8:	e1530007 	cmp	r3, r7
 5bc:	0a000005 	beq	5d8 <__call_exitprocs+0x7c>
 5c0:	e2444001 	sub	r4, r4, #1
 5c4:	e3740001 	cmn	r4, #1
 5c8:	e2455004 	sub	r5, r5, #4
 5cc:	0a000022 	beq	65c <__call_exitprocs+0x100>
 5d0:	e3570000 	cmp	r7, #0
 5d4:	1afffff6 	bne	5b4 <__call_exitprocs+0x58>
 5d8:	e5963004 	ldr	r3, [r6, #4]
 5dc:	e06a2005 	rsb	r2, r10, r5
 5e0:	e2433001 	sub	r3, r3, #1
 5e4:	e0862002 	add	r2, r6, r2
 5e8:	e1530004 	cmp	r3, r4
 5ec:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 5f0:	13a01000 	movne	r1, #0
 5f4:	05864004 	streq	r4, [r6, #4]
 5f8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 5fc:	e3530000 	cmp	r3, #0
 600:	0affffee 	beq	5c0 <__call_exitprocs+0x64>
 604:	e1a02418 	lsl	r2, r8, r4
 608:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 60c:	e1120001 	tst	r2, r1
 610:	e5969004 	ldr	r9, [r6, #4]
 614:	0a000016 	beq	674 <__call_exitprocs+0x118>
 618:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 61c:	e1120001 	tst	r2, r1
 620:	1a000016 	bne	680 <__call_exitprocs+0x124>
 624:	e59d0008 	ldr	r0, [sp, #8]
 628:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 62c:	e1a0e00f 	mov	lr, pc
 630:	e12fff13 	bx	r3
 634:	e5963004 	ldr	r3, [r6, #4]
 638:	e1530009 	cmp	r3, r9
 63c:	1affffd0 	bne	584 <__call_exitprocs+0x28>
 640:	e59b3000 	ldr	r3, [r11]
 644:	e1530006 	cmp	r3, r6
 648:	1affffcd 	bne	584 <__call_exitprocs+0x28>
 64c:	e2444001 	sub	r4, r4, #1
 650:	e3740001 	cmn	r4, #1
 654:	e2455004 	sub	r5, r5, #4
 658:	1affffdc 	bne	5d0 <__call_exitprocs+0x74>
 65c:	e59f1070 	ldr	r1, [pc, #112]	; 6d4 <__call_exitprocs+0x178>
 660:	e3510000 	cmp	r1, #0
 664:	1a000009 	bne	690 <__call_exitprocs+0x134>
 668:	e28dd014 	add	sp, sp, #20
 66c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 670:	e12fff1e 	bx	lr
 674:	e1a0e00f 	mov	lr, pc
 678:	e12fff13 	bx	r3
 67c:	eaffffec 	b	634 <__call_exitprocs+0xd8>
 680:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 684:	e1a0e00f 	mov	lr, pc
 688:	e12fff13 	bx	r3
 68c:	eaffffe8 	b	634 <__call_exitprocs+0xd8>
 690:	e5963004 	ldr	r3, [r6, #4]
 694:	e3530000 	cmp	r3, #0
 698:	e5963000 	ldr	r3, [r6]
 69c:	1a000008 	bne	6c4 <__call_exitprocs+0x168>
 6a0:	e3530000 	cmp	r3, #0
 6a4:	0a000006 	beq	6c4 <__call_exitprocs+0x168>
 6a8:	e1a00006 	mov	r0, r6
 6ac:	e58b3000 	str	r3, [r11]
 6b0:	e320f000 	nop	{0}
 6b4:	e59b6000 	ldr	r6, [r11]
 6b8:	e3560000 	cmp	r6, #0
 6bc:	1affffb5 	bne	598 <__call_exitprocs+0x3c>
 6c0:	eaffffe8 	b	668 <__call_exitprocs+0x10c>
 6c4:	e1a0b006 	mov	r11, r6
 6c8:	e1a06003 	mov	r6, r3
 6cc:	eafffff9 	b	6b8 <__call_exitprocs+0x15c>
 6d0:	0000084c 	.word	0x0000084c
 6d4:	00000000 	.word	0x00000000

000006d8 <register_fini>:
 6d8:	e92d4008 	push	{r3, lr}
 6dc:	e59f3010 	ldr	r3, [pc, #16]	; 6f4 <register_fini+0x1c>
 6e0:	e3530000 	cmp	r3, #0
 6e4:	159f000c 	ldrne	r0, [pc, #12]	; 6f8 <register_fini+0x20>
 6e8:	1bffff49 	blne	414 <atexit>
 6ec:	e8bd4008 	pop	{r3, lr}
 6f0:	e12fff1e 	bx	lr
 6f4:	00000874 	.word	0x00000874
 6f8:	000006fc 	.word	0x000006fc

000006fc <__libc_fini_array>:
 6fc:	e92d4038 	push	{r3, r4, r5, lr}
 700:	e59f5030 	ldr	r5, [pc, #48]	; 738 <__libc_fini_array+0x3c>
 704:	e59f4030 	ldr	r4, [pc, #48]	; 73c <__libc_fini_array+0x40>
 708:	e0654004 	rsb	r4, r5, r4
 70c:	e1b04144 	asrs	r4, r4, #2
 710:	10855104 	addne	r5, r5, r4, lsl #2
 714:	0a000004 	beq	72c <__libc_fini_array+0x30>
 718:	e5353004 	ldr	r3, [r5, #-4]!
 71c:	e1a0e00f 	mov	lr, pc
 720:	e12fff13 	bx	r3
 724:	e2544001 	subs	r4, r4, #1
 728:	1afffffa 	bne	718 <__libc_fini_array+0x1c>
 72c:	eb000050 	bl	874 <__libc_fini>
 730:	e8bd4038 	pop	{r3, r4, r5, lr}
 734:	e12fff1e 	bx	lr
 738:	0000088c 	.word	0x0000088c
 73c:	00000890 	.word	0x00000890

00000740 <__cs3_premain>:
 740:	e92d4008 	push	{r3, lr}
 744:	eb00001d 	bl	7c0 <__libc_init_array>
 748:	e59f3030 	ldr	r3, [pc, #48]	; 780 <__cs3_premain+0x40>
 74c:	e3530000 	cmp	r3, #0
 750:	15930000 	ldrne	r0, [r3]
 754:	01a00003 	moveq	r0, r3
 758:	e59f3024 	ldr	r3, [pc, #36]	; 784 <__cs3_premain+0x44>
 75c:	e3530000 	cmp	r3, #0
 760:	15931000 	ldrne	r1, [r3]
 764:	01a01003 	moveq	r1, r3
 768:	e3a02000 	mov	r2, #0
 76c:	ebfffeba 	bl	25c <main>
 770:	e59f3010 	ldr	r3, [pc, #16]	; 788 <__cs3_premain+0x48>
 774:	e3530000 	cmp	r3, #0
 778:	1bffff2d 	blne	434 <exit>
 77c:	eafffffe 	b	77c <__cs3_premain+0x3c>
	...
 788:	00000434 	.word	0x00000434

0000078c <_exit>:
 78c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 790:	e3a00018 	mov	r0, #24
 794:	e59f1004 	ldr	r1, [pc, #4]	; 7a0 <_exit+0x14>
 798:	ef123456 	svc	0x00123456
 79c:	eafffffe 	b	79c <_exit+0x10>
 7a0:	00020026 	.word	0x00020026

000007a4 <__cs3_isr_interrupt>:
 7a4:	eafffffe 	b	7a4 <__cs3_isr_interrupt>

000007a8 <__cs3_isr_undef>:
 7a8:	eafffffe 	b	7a8 <__cs3_isr_undef>

000007ac <__cs3_isr_swi>:
 7ac:	eafffffe 	b	7ac <__cs3_isr_swi>

000007b0 <__cs3_isr_pabort>:
 7b0:	eafffffe 	b	7b0 <__cs3_isr_pabort>

000007b4 <__cs3_isr_dabort>:
 7b4:	eafffffe 	b	7b4 <__cs3_isr_dabort>

000007b8 <__cs3_isr_irq>:
 7b8:	eafffffe 	b	7b8 <__cs3_isr_irq>

000007bc <__cs3_isr_fiq>:
 7bc:	eafffffe 	b	7bc <__cs3_isr_fiq>

000007c0 <__libc_init_array>:
 7c0:	e92d4070 	push	{r4, r5, r6, lr}
 7c4:	e59f506c 	ldr	r5, [pc, #108]	; 838 <__libc_init_array+0x78>
 7c8:	e59f606c 	ldr	r6, [pc, #108]	; 83c <__libc_init_array+0x7c>
 7cc:	e0656006 	rsb	r6, r5, r6
 7d0:	e1b06146 	asrs	r6, r6, #2
 7d4:	12455004 	subne	r5, r5, #4
 7d8:	13a04000 	movne	r4, #0
 7dc:	0a000005 	beq	7f8 <__libc_init_array+0x38>
 7e0:	e5b53004 	ldr	r3, [r5, #4]!
 7e4:	e2844001 	add	r4, r4, #1
 7e8:	e1a0e00f 	mov	lr, pc
 7ec:	e12fff13 	bx	r3
 7f0:	e1560004 	cmp	r6, r4
 7f4:	1afffff9 	bne	7e0 <__libc_init_array+0x20>
 7f8:	e59f5040 	ldr	r5, [pc, #64]	; 840 <__libc_init_array+0x80>
 7fc:	e59f6040 	ldr	r6, [pc, #64]	; 844 <__libc_init_array+0x84>
 800:	e0656006 	rsb	r6, r5, r6
 804:	eb000012 	bl	854 <_init>
 808:	e1b06146 	asrs	r6, r6, #2
 80c:	12455004 	subne	r5, r5, #4
 810:	13a04000 	movne	r4, #0
 814:	0a000005 	beq	830 <__libc_init_array+0x70>
 818:	e5b53004 	ldr	r3, [r5, #4]!
 81c:	e2844001 	add	r4, r4, #1
 820:	e1a0e00f 	mov	lr, pc
 824:	e12fff13 	bx	r3
 828:	e1560004 	cmp	r6, r4
 82c:	1afffff9 	bne	818 <__libc_init_array+0x58>
 830:	e8bd4070 	pop	{r4, r5, r6, lr}
 834:	e12fff1e 	bx	lr
 838:	0000086c 	.word	0x0000086c
 83c:	0000086c 	.word	0x0000086c
 840:	0000086c 	.word	0x0000086c
 844:	00000874 	.word	0x00000874

Disassembly of section .rodata:

0000084c <_global_impure_ptr>:
 84c:	000008b8 00000043                       ....C...

00000854 <_init>:
 854:	e1a0c00d 	mov	r12, sp
 858:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 85c:	e24cb004 	sub	r11, r12, #4
 860:	e24bd028 	sub	sp, r11, #40	; 0x28
 864:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 868:	e12fff1e 	bx	lr

0000086c <__init_array_start>:
 86c:	000006d8 	.word	0x000006d8

00000870 <__frame_dummy_init_array_entry>:
 870:	00000208                                ....

00000874 <__libc_fini>:
 874:	e1a0c00d 	mov	r12, sp
 878:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 87c:	e24cb004 	sub	r11, r12, #4
 880:	e24bd028 	sub	sp, r11, #40	; 0x28
 884:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 888:	e12fff1e 	bx	lr

0000088c <__fini_array_start>:
 88c:	000001c4 	.word	0x000001c4

00000890 <__cs3_regions>:
 890:	00000000 	.word	0x00000000
 894:	00000040 	.word	0x00000040
 898:	00000040 	.word	0x00000040
 89c:	00000ca8 	.word	0x00000ca8
 8a0:	00000020 	.word	0x00000020

000008a4 <__cs3_regions_end>:
 8a4:	00000000 	.word	0x00000000
