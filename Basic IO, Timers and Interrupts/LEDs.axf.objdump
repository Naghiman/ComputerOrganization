
P:/G05_lab3/LEDs.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	b8 0c 00 00 c4 0c 00 00 d0 0c 00 00 dc 0c 00 00     ................
  30:	e8 0c 00 00 f8 10 00 00 60 0b 00 00 f4 0c 00 00     ........`.......

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0003ee 	bl	1094 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000011e8 	.word	0x000011e8

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001620 	.word	0x00001620

00000124 <__cs3_heap_start_ptr>:
     124:	00001648 	.word	0x00001648

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001628 	.word	0x00001628
     170:	0000162b 	.word	0x0000162b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001628 	.word	0x00001628
     1bc:	00001628 	.word	0x00001628
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001628 	.word	0x00001628
     200:	00000000 	.word	0x00000000
     204:	00001184 	.word	0x00001184

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001184 	.word	0x00001184
     250:	0000162c 	.word	0x0000162c
     254:	000011e8 	.word	0x000011e8
     258:	00000000 	.word	0x00000000

0000025c <read_LEDs_ASM>:
	.equ LED_BASE, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM:
	LDR R1, = LED_BASE
     25c:	e59f1010 	ldr	r1, [pc, #16]	; 274 <write_LEDs_ASM+0xc>
	LDR R0, [R1]
     260:	e5910000 	ldr	r0, [r1]
	BX LR
     264:	e12fff1e 	bx	lr

00000268 <write_LEDs_ASM>:

	//.end

write_LEDs_ASM:
	LDR R1, = LED_BASE
     268:	e59f1004 	ldr	r1, [pc, #4]	; 274 <write_LEDs_ASM+0xc>
	STR R0, [R1]	//store
     26c:	e5810000 	str	r0, [r1]
	BX LR
     270:	e12fff1e 	bx	lr
	.equ LED_BASE, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM:
	LDR R1, = LED_BASE
     274:	ff200000 	.word	0xff200000

00000278 <read_slider_switches_ASM>:
.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, = SW_BASE
     278:	e59f1004 	ldr	r1, [pc, #4]	; 284 <read_slider_switches_ASM+0xc>
	LDR R0, [R1]
     27c:	e5910000 	ldr	r0, [r1]
	BX LR
     280:	e12fff1e 	bx	lr
.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, = SW_BASE
     284:	ff200040 	.word	0xff200040

00000288 <HEX_clear_ASM>:
            .global HEX_clear_ASM
            .global HEX_flood_ASM
            .global HEX_write_ASM

HEX_clear_ASM:
			MOV 	R2, #6	//loop counter
     288:	e3a02006 	mov	r2, #6
			MOV 	R4, #1	//bit identifier
     28c:	e3a04001 	mov	r4, #1
			LDR		R6, =HEX0_3_BASE
     290:	e59f60d8 	ldr	r6, [pc, #216]	; 370 <Value+0x10>
			LDR 	R7, =HEX4_5_BASE
     294:	e59f70d8 	ldr	r7, [pc, #216]	; 374 <Value+0x14>
			MOV		R3, #0x00
     298:	e3a03000 	mov	r3, #0
			PUSH	{LR}        
     29c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
			B		Flag                
     2a0:	ea00000e 	b	2e0 <Flag>

000002a4 <HEX_flood_ASM>:

HEX_flood_ASM:
			MOV 	R2, #6	//loop counter
     2a4:	e3a02006 	mov	r2, #6
			MOV 	R4, #1	//bit identifier
     2a8:	e3a04001 	mov	r4, #1
			LDR		R6, =HEX0_3_BASE
     2ac:	e59f60bc 	ldr	r6, [pc, #188]	; 370 <Value+0x10>
			LDR 	R7, =HEX4_5_BASE
     2b0:	e59f70bc 	ldr	r7, [pc, #188]	; 374 <Value+0x14>
			MOV		R3, #0x7F
     2b4:	e3a0307f 	mov	r3, #127	; 0x7f
			PUSH	{LR}        
     2b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
			B		Flag
     2bc:	ea000007 	b	2e0 <Flag>

000002c0 <HEX_write_ASM>:
        
HEX_write_ASM:
			MOV 	R2, #6	//loop counter
     2c0:	e3a02006 	mov	r2, #6
			MOV 	R4, #1	//bit identifier
     2c4:	e3a04001 	mov	r4, #1
			LDR		R6, =HEX0_3_BASE
     2c8:	e59f60a0 	ldr	r6, [pc, #160]	; 370 <Value+0x10>
			LDR 	R7, =HEX4_5_BASE
     2cc:	e59f70a0 	ldr	r7, [pc, #160]	; 374 <Value+0x14>
            LDR     R5, =Value
     2d0:	e59f50a0 	ldr	r5, [pc, #160]	; 378 <Value+0x18>
			LDRB	R3, [R5, R1]       
     2d4:	e7d53001 	ldrb	r3, [r5, r1]
			PUSH	{LR}        
     2d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
			B		Flag
     2dc:	eaffffff 	b	2e0 <Flag>

000002e0 <Flag>:
			            			
Flag:		TST 	R0, R4
     2e0:	e1100004 	tst	r0, r4
			BLNE	Identify
     2e4:	1b000005 	blne	300 <Identify>
			LSL 	R4, R4, #1
     2e8:	e1a04084 	lsl	r4, r4, #1
			SUBS	R2, R2, #1
     2ec:	e2522001 	subs	r2, r2, #1
			BEQ		Done
     2f0:	0a000000 	beq	2f8 <Done>
			B		Flag
     2f4:	eafffff9 	b	2e0 <Flag>

000002f8 <Done>:

Done:		POP		{LR}
     2f8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
			BX		LR			
     2fc:	e12fff1e 	bx	lr

00000300 <Identify>:

Identify:	CMP		R2, #6
     300:	e3520006 	cmp	r2, #6
			BEQ		Hex0
     304:	0a000009 	beq	330 <Hex0>
			CMP		R2, #5
     308:	e3520005 	cmp	r2, #5
			BEQ		Hex1
     30c:	0a000009 	beq	338 <Hex1>
			CMP		R2, #4
     310:	e3520004 	cmp	r2, #4
			BEQ		Hex2
     314:	0a000009 	beq	340 <Hex2>
			CMP		R2, #3
     318:	e3520003 	cmp	r2, #3
			BEQ		Hex3
     31c:	0a000009 	beq	348 <Hex3>
			CMP		R2, #2
     320:	e3520002 	cmp	r2, #2
			BEQ		Hex4
     324:	0a000009 	beq	350 <Hex4>
			CMP		R2, #1
     328:	e3520001 	cmp	r2, #1
			BEQ		Hex5
     32c:	0a000009 	beq	358 <Hex5>

00000330 <Hex0>:

Hex0:		STRB	R3, [R6]
     330:	e5c63000 	strb	r3, [r6]
			BX		LR
     334:	e12fff1e 	bx	lr

00000338 <Hex1>:

Hex1:		STRB	R3, [R6, #1]
     338:	e5c63001 	strb	r3, [r6, #1]
			BX		LR
     33c:	e12fff1e 	bx	lr

00000340 <Hex2>:

Hex2:		STRB	R3, [R6, #2]
     340:	e5c63002 	strb	r3, [r6, #2]
			BX		LR
     344:	e12fff1e 	bx	lr

00000348 <Hex3>:

Hex3:		STRB	R3, [R6, #3]
     348:	e5c63003 	strb	r3, [r6, #3]
			BX		LR
     34c:	e12fff1e 	bx	lr

00000350 <Hex4>:

Hex4:		STRB	R3, [R7]
     350:	e5c73000 	strb	r3, [r7]
			BX		LR
     354:	e12fff1e 	bx	lr

00000358 <Hex5>:

Hex5:		STRB	R3, [R7, #1]
     358:	e5c73001 	strb	r3, [r7, #1]
			BX		LR
     35c:	e12fff1e 	bx	lr

00000360 <Value>:
     360:	4f5b063f 	.word	0x4f5b063f
     364:	077d6d66 	.word	0x077d6d66
     368:	7f77677f 	.word	0x7f77677f
     36c:	71793f39 	.word	0x71793f39
            .global HEX_write_ASM

HEX_clear_ASM:
			MOV 	R2, #6	//loop counter
			MOV 	R4, #1	//bit identifier
			LDR		R6, =HEX0_3_BASE
     370:	ff200020 	.word	0xff200020
			LDR 	R7, =HEX4_5_BASE
     374:	ff200030 	.word	0xff200030
HEX_write_ASM:
			MOV 	R2, #6	//loop counter
			MOV 	R4, #1	//bit identifier
			LDR		R6, =HEX0_3_BASE
			LDR 	R7, =HEX4_5_BASE
            LDR     R5, =Value
     378:	00000360 	.word	0x00000360

0000037c <read_PB_data_ASM>:
	.global PB_clear_edgecap_ASM
	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM

read_PB_data_ASM:
	LDR R1, =PB_BASE
     37c:	e59f1020 	ldr	r1, [pc, #32]	; 3a4 <disable_PB_INT_ASM+0x4>
	LDR R0, [R1]
     380:	e5910000 	ldr	r0, [r1]
	AND R0, R0, #0xF //get rid of all bits except first 4
     384:	e200000f 	and	r0, r0, #15
	BX LR
     388:	e12fff1e 	bx	lr

0000038c <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:

	BX LR
     38c:	e12fff1e 	bx	lr

00000390 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:

	BX LR
     390:	e12fff1e 	bx	lr

00000394 <PB_edgecap_is_pressed_ASM>:
PB_edgecap_is_pressed_ASM:

	BX LR
     394:	e12fff1e 	bx	lr

00000398 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:

	BX LR
     398:	e12fff1e 	bx	lr

0000039c <enable_PB_INT_ASM>:

enable_PB_INT_ASM:

	BX LR
     39c:	e12fff1e 	bx	lr

000003a0 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:

	BX LR
     3a0:	e12fff1e 	bx	lr
	.global PB_clear_edgecap_ASM
	.global enable_PB_INT_ASM
	.global disable_PB_INT_ASM

read_PB_data_ASM:
	LDR R1, =PB_BASE
     3a4:	ff200050 	.word	0xff200050

000003a8 <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
     3a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
     3ac:	e3a01000 	mov	r1, #0
	MOV R2, #1
     3b0:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
     3b4:	e5907000 	ldr	r7, [r0]
	B LOOP
     3b8:	eaffffff 	b	3bc <LOOP>

000003bc <LOOP>:

LOOP:
	TST R7, R2, LSL R1
     3bc:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
     3c0:	0a000000 	beq	3c8 <CONTINUE>
	BL CONFIG
     3c4:	eb000004 	bl	3dc <CONFIG>

000003c8 <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
     3c8:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     3cc:	e3510004 	cmp	r1, #4
	BLT LOOP
     3d0:	bafffff9 	blt	3bc <LOOP>

000003d4 <DONE>:

DONE:
	POP {R4-R7, LR}
     3d4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
     3d8:	e12fff1e 	bx	lr

000003dc <CONFIG>:


CONFIG:
	PUSH {LR}
     3dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
     3e0:	e59f3148 	ldr	r3, [pc, #328]	; 530 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
     3e4:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
     3e8:	eb000005 	bl	404 <DISABLE>
	BL SET_LOAD_VAL
     3ec:	eb000008 	bl	414 <SET_LOAD_VAL>
	BL SET_LOAD_BIT
     3f0:	eb00000e 	bl	430 <SET_LOAD_BIT>
	BL SET_INT_BIT
     3f4:	eb000013 	bl	448 <SET_INT_BIT>
	BL SET_EN_BIT
     3f8:	eb000019 	bl	464 <SET_EN_BIT>
	
	POP {LR}
     3fc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
     400:	e12fff1e 	bx	lr

00000404 <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
     404:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
     408:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
     40c:	e5845008 	str	r5, [r4, #8]
	BX LR
     410:	e12fff1e 	bx	lr

00000414 <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
     414:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
     418:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
     41c:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
     420:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
     424:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
     428:	e5845000 	str	r5, [r4]
	BX LR
     42c:	e12fff1e 	bx	lr

00000430 <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
     430:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
     434:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
     438:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
     43c:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
     440:	e5845008 	str	r5, [r4, #8]
	BX LR
     444:	e12fff1e 	bx	lr

00000448 <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
     448:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
     44c:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
     450:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
     454:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
     458:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
     45c:	e5845008 	str	r5, [r4, #8]
	BX LR
     460:	e12fff1e 	bx	lr

00000464 <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
     464:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
     468:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
     46c:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
     470:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
     474:	e5845008 	str	r5, [r4, #8]
	BX LR
     478:	e12fff1e 	bx	lr

0000047c <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
     47c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
     480:	e3a01000 	mov	r1, #0
	MOV R2, #1
     484:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
     488:	eaffffff 	b	48c <CLEAR_INT_LOOP>

0000048c <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
     48c:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
     490:	0a000000 	beq	498 <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
     494:	eb000005 	bl	4b0 <CLEAR_INT>

00000498 <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
     498:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     49c:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
     4a0:	bafffff9 	blt	48c <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
     4a4:	eaffffff 	b	4a8 <CLEAR_INT_DONE>

000004a8 <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
     4a8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     4ac:	e12fff1e 	bx	lr

000004b0 <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
     4b0:	e59f3078 	ldr	r3, [pc, #120]	; 530 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     4b4:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
     4b8:	e593300c 	ldr	r3, [r3, #12]
	BX LR
     4bc:	e12fff1e 	bx	lr

000004c0 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
     4c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
     4c4:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
     4c8:	e3a01000 	mov	r1, #0
	MOV R2, #1
     4cc:	e3a02001 	mov	r2, #1
	MOV R4, #0
     4d0:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
     4d4:	eaffffff 	b	4d8 <READ_INT_LOOP>

000004d8 <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
     4d8:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
     4dc:	0a000000 	beq	4e4 <READ_INT_CONTINUE>
	BL READ_INT
     4e0:	eb000008 	bl	508 <READ_INT>

000004e4 <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
     4e4:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     4e8:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
     4ec:	0a000001 	beq	4f8 <READ_INT_DONE>
	LSL R4, R4, #1
     4f0:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
     4f4:	eafffff7 	b	4d8 <READ_INT_LOOP>

000004f8 <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
     4f8:	e1a00004 	mov	r0, r4
	POP {R4}
     4fc:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
     500:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     504:	e12fff1e 	bx	lr

00000508 <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
     508:	e59f3020 	ldr	r3, [pc, #32]	; 530 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     50c:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
     510:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
     514:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
     518:	e0244003 	eor	r4, r4, r3
	BX LR
     51c:	e12fff1e 	bx	lr

00000520 <HPS_TIM_BASE>:
     520:	ffc08000 	.word	0xffc08000
     524:	ffc09000 	.word	0xffc09000
     528:	ffd00000 	.word	0xffd00000
     52c:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
     530:	00000520 	.word	0x00000520

00000534 <main>:
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/HPS_TIM.h"
#include "./drivers/inc/int_setup.h"
#include "./drivers/inc/ISRs.h"

int main(){
     534:	e92d4800 	push	{r11, lr}
     538:	e28db004 	add	r11, sp, #4
     53c:	e24dd050 	sub	sp, sp, #80	; 0x50
	int_setup(2, (int[]){73, 199});
     540:	e3013188 	movw	r3, #4488	; 0x1188
     544:	e3403000 	movt	r3, #0
     548:	e24b203c 	sub	r2, r11, #60	; 0x3c
     54c:	e8930003 	ldm	r3, {r0, r1}
     550:	e8820003 	stm	r2, {r0, r1}
     554:	e24b303c 	sub	r3, r11, #60	; 0x3c
     558:	e3a00002 	mov	r0, #2
     55c:	e1a01003 	mov	r1, r3
     560:	eb0001f2 	bl	d30 <int_setup>

	int count = 0;
     564:	e3a03000 	mov	r3, #0
     568:	e50b3008 	str	r3, [r11, #-8]
	int edgecap;
	int flag;

	HPS_TIM_config_t hps_tim0;

	hps_tim0.tim = TIM0;
     56c:	e3a03001 	mov	r3, #1
     570:	e54b3050 	strb	r3, [r11, #-80]	; 0xffffffb0
	hps_tim0.timeout = 10000;
     574:	e3023710 	movw	r3, #10000	; 0x2710
     578:	e50b304c 	str	r3, [r11, #-76]	; 0xffffffb4
	hps_tim0.LD_en = 1;
     57c:	e3a03001 	mov	r3, #1
     580:	e50b3048 	str	r3, [r11, #-72]	; 0xffffffb8
	hps_tim0.INT_en = 1;
     584:	e3a03001 	mov	r3, #1
     588:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
	hps_tim0.enable = 1;
     58c:	e3a03001 	mov	r3, #1
     590:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0

	HPS_TIM_config_ASM(&hps_tim0);
     594:	e24b3050 	sub	r3, r11, #80	; 0x50
     598:	e1a00003 	mov	r0, r3
     59c:	ebffff81 	bl	3a8 <HPS_TIM_config_ASM>
	int second2;
	int minute;
	int minute1;
	int minute2;
	
	enable_PB_INT_ASM(PB0 | PB1 | PB2 | PB3);
     5a0:	e3a0000f 	mov	r0, #15
     5a4:	ebffff7c 	bl	39c <enable_PB_INT_ASM>
     5a8:	ea000000 	b	5b0 <main+0x7c>
				HEX_write_ASM(HEX3, second2);
				HEX_write_ASM(HEX4, minute1);
				HEX_write_ASM(HEX5, minute2);
			}
		}
	}
     5ac:	e1a00000 	nop			; (mov r0, r0)
	
	enable_PB_INT_ASM(PB0 | PB1 | PB2 | PB3);
	
	while(1){

		if(fpga_pb_key0_int_flag){
     5b0:	e30038c0 	movw	r3, #2240	; 0x8c0
     5b4:	e3403000 	movt	r3, #0
     5b8:	e5933000 	ldr	r3, [r3]
     5bc:	e3530000 	cmp	r3, #0
     5c0:	0a000005 	beq	5dc <main+0xa8>
			flag = 1;
     5c4:	e3a03001 	mov	r3, #1
     5c8:	e50b300c 	str	r3, [r11, #-12]
			fpga_pb_key0_int_flag = 0;
     5cc:	e30038c0 	movw	r3, #2240	; 0x8c0
     5d0:	e3403000 	movt	r3, #0
     5d4:	e3a02000 	mov	r2, #0
     5d8:	e5832000 	str	r2, [r3]
		}

		if(fpga_pb_key1_int_flag){
     5dc:	e30038c4 	movw	r3, #2244	; 0x8c4
     5e0:	e3403000 	movt	r3, #0
     5e4:	e5933000 	ldr	r3, [r3]
     5e8:	e3530000 	cmp	r3, #0
     5ec:	0a000005 	beq	608 <main+0xd4>
			flag = 0;
     5f0:	e3a03000 	mov	r3, #0
     5f4:	e50b300c 	str	r3, [r11, #-12]
			fpga_pb_key1_int_flag = 0;
     5f8:	e30038c4 	movw	r3, #2244	; 0x8c4
     5fc:	e3403000 	movt	r3, #0
     600:	e3a02000 	mov	r2, #0
     604:	e5832000 	str	r2, [r3]
		}
	
		if(fpga_pb_key2_int_flag){
     608:	e30038c8 	movw	r3, #2248	; 0x8c8
     60c:	e3403000 	movt	r3, #0
     610:	e5933000 	ldr	r3, [r3]
     614:	e3530000 	cmp	r3, #0
     618:	0a000010 	beq	660 <main+0x12c>
			flag = 0;
     61c:	e3a03000 	mov	r3, #0
     620:	e50b300c 	str	r3, [r11, #-12]
			fpga_pb_key2_int_flag = 0;
     624:	e30038c8 	movw	r3, #2248	; 0x8c8
     628:	e3403000 	movt	r3, #0
     62c:	e3a02000 	mov	r2, #0
     630:	e5832000 	str	r2, [r3]
			HEX_write_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5, 0x00);
     634:	e3a0003f 	mov	r0, #63	; 0x3f
     638:	e3a01000 	mov	r1, #0
     63c:	ebffff1f 	bl	2c0 <HEX_write_ASM>
			count = 0;
     640:	e3a03000 	mov	r3, #0
     644:	e50b3008 	str	r3, [r11, #-8]
			milisecond = 0;
     648:	e3a03000 	mov	r3, #0
     64c:	e50b3010 	str	r3, [r11, #-16]
			minute = 0;
     650:	e3a03000 	mov	r3, #0
     654:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			second = 0;
     658:	e3a03000 	mov	r3, #0
     65c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
		}

		if (flag == 1){
     660:	e51b300c 	ldr	r3, [r11, #-12]
     664:	e3530001 	cmp	r3, #1
     668:	1affffcf 	bne	5ac <main+0x78>
			if(hps_tim0_int_flag){
     66c:	e30038bc 	movw	r3, #2236	; 0x8bc
     670:	e3403000 	movt	r3, #0
     674:	e5933000 	ldr	r3, [r3]
     678:	e3530000 	cmp	r3, #0
     67c:	0affffca 	beq	5ac <main+0x78>
				hps_tim0_int_flag = 0;
     680:	e30038bc 	movw	r3, #2236	; 0x8bc
     684:	e3403000 	movt	r3, #0
     688:	e3a02000 	mov	r2, #0
     68c:	e5832000 	str	r2, [r3]
				count++;
     690:	e51b3008 	ldr	r3, [r11, #-8]
     694:	e2833001 	add	r3, r3, #1
     698:	e50b3008 	str	r3, [r11, #-8]
				milisecond = count % 100;
     69c:	e51b3008 	ldr	r3, [r11, #-8]
     6a0:	e308251f 	movw	r2, #34079	; 0x851f
     6a4:	e34521eb 	movt	r2, #20971	; 0x51eb
     6a8:	e0c21392 	smull	r1, r2, r2, r3
     6ac:	e1a012c2 	asr	r1, r2, #5
     6b0:	e1a02fc3 	asr	r2, r3, #31
     6b4:	e0622001 	rsb	r2, r2, r1
     6b8:	e3a01064 	mov	r1, #100	; 0x64
     6bc:	e0020291 	mul	r2, r1, r2
     6c0:	e0623003 	rsb	r3, r2, r3
     6c4:	e50b3010 	str	r3, [r11, #-16]
				milisecond1 = milisecond % 10;
     6c8:	e51b2010 	ldr	r2, [r11, #-16]
     6cc:	e3063667 	movw	r3, #26215	; 0x6667
     6d0:	e3463666 	movt	r3, #26214	; 0x6666
     6d4:	e0c31293 	smull	r1, r3, r3, r2
     6d8:	e1a01143 	asr	r1, r3, #2
     6dc:	e1a03fc2 	asr	r3, r2, #31
     6e0:	e0631001 	rsb	r1, r3, r1
     6e4:	e1a03001 	mov	r3, r1
     6e8:	e1a03103 	lsl	r3, r3, #2
     6ec:	e0833001 	add	r3, r3, r1
     6f0:	e1a03083 	lsl	r3, r3, #1
     6f4:	e0633002 	rsb	r3, r3, r2
     6f8:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
				milisecond2 = milisecond / 10;
     6fc:	e51b2010 	ldr	r2, [r11, #-16]
     700:	e3063667 	movw	r3, #26215	; 0x6667
     704:	e3463666 	movt	r3, #26214	; 0x6666
     708:	e0c31293 	smull	r1, r3, r3, r2
     70c:	e1a01143 	asr	r1, r3, #2
     710:	e1a03fc2 	asr	r3, r2, #31
     714:	e0633001 	rsb	r3, r3, r1
     718:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
				secondcount = count / 100;
     71c:	e51b2008 	ldr	r2, [r11, #-8]
     720:	e308351f 	movw	r3, #34079	; 0x851f
     724:	e34531eb 	movt	r3, #20971	; 0x51eb
     728:	e0c31293 	smull	r1, r3, r3, r2
     72c:	e1a012c3 	asr	r1, r3, #5
     730:	e1a03fc2 	asr	r3, r2, #31
     734:	e0633001 	rsb	r3, r3, r1
     738:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
				minute = secondcount / 60;
     73c:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     740:	e3082889 	movw	r2, #34953	; 0x8889
     744:	e3482888 	movt	r2, #34952	; 0x8888
     748:	e0c21392 	smull	r1, r2, r2, r3
     74c:	e0822003 	add	r2, r2, r3
     750:	e1a022c2 	asr	r2, r2, #5
     754:	e1a03fc3 	asr	r3, r3, #31
     758:	e0633002 	rsb	r3, r3, r2
     75c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				minute1 = minute % 10;
     760:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     764:	e3063667 	movw	r3, #26215	; 0x6667
     768:	e3463666 	movt	r3, #26214	; 0x6666
     76c:	e0c31293 	smull	r1, r3, r3, r2
     770:	e1a01143 	asr	r1, r3, #2
     774:	e1a03fc2 	asr	r3, r2, #31
     778:	e0631001 	rsb	r1, r3, r1
     77c:	e1a03001 	mov	r3, r1
     780:	e1a03103 	lsl	r3, r3, #2
     784:	e0833001 	add	r3, r3, r1
     788:	e1a03083 	lsl	r3, r3, #1
     78c:	e0633002 	rsb	r3, r3, r2
     790:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
				minute2 = minute / 10;
     794:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     798:	e3063667 	movw	r3, #26215	; 0x6667
     79c:	e3463666 	movt	r3, #26214	; 0x6666
     7a0:	e0c31293 	smull	r1, r3, r3, r2
     7a4:	e1a01143 	asr	r1, r3, #2
     7a8:	e1a03fc2 	asr	r3, r2, #31
     7ac:	e0633001 	rsb	r3, r3, r1
     7b0:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
				second = secondcount % 60;
     7b4:	e51b2024 	ldr	r2, [r11, #-36]	; 0xffffffdc
     7b8:	e3083889 	movw	r3, #34953	; 0x8889
     7bc:	e3483888 	movt	r3, #34952	; 0x8888
     7c0:	e0c31293 	smull	r1, r3, r3, r2
     7c4:	e0833002 	add	r3, r3, r2
     7c8:	e1a012c3 	asr	r1, r3, #5
     7cc:	e1a03fc2 	asr	r3, r2, #31
     7d0:	e0631001 	rsb	r1, r3, r1
     7d4:	e1a03001 	mov	r3, r1
     7d8:	e1a03203 	lsl	r3, r3, #4
     7dc:	e0613003 	rsb	r3, r1, r3
     7e0:	e1a03103 	lsl	r3, r3, #2
     7e4:	e0633002 	rsb	r3, r3, r2
     7e8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
				second1 = second % 10;
     7ec:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     7f0:	e3063667 	movw	r3, #26215	; 0x6667
     7f4:	e3463666 	movt	r3, #26214	; 0x6666
     7f8:	e0c31293 	smull	r1, r3, r3, r2
     7fc:	e1a01143 	asr	r1, r3, #2
     800:	e1a03fc2 	asr	r3, r2, #31
     804:	e0631001 	rsb	r1, r3, r1
     808:	e1a03001 	mov	r3, r1
     80c:	e1a03103 	lsl	r3, r3, #2
     810:	e0833001 	add	r3, r3, r1
     814:	e1a03083 	lsl	r3, r3, #1
     818:	e0633002 	rsb	r3, r3, r2
     81c:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
				second2 = second / 10;
     820:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     824:	e3063667 	movw	r3, #26215	; 0x6667
     828:	e3463666 	movt	r3, #26214	; 0x6666
     82c:	e0c31293 	smull	r1, r3, r3, r2
     830:	e1a01143 	asr	r1, r3, #2
     834:	e1a03fc2 	asr	r3, r2, #31
     838:	e0633001 	rsb	r3, r3, r1
     83c:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
				HEX_write_ASM(HEX0, milisecond1);
     840:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     844:	e6ef3073 	uxtb	r3, r3
     848:	e3a00001 	mov	r0, #1
     84c:	e1a01003 	mov	r1, r3
     850:	ebfffe9a 	bl	2c0 <HEX_write_ASM>
				HEX_write_ASM(HEX1, milisecond2);
     854:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     858:	e6ef3073 	uxtb	r3, r3
     85c:	e3a00002 	mov	r0, #2
     860:	e1a01003 	mov	r1, r3
     864:	ebfffe95 	bl	2c0 <HEX_write_ASM>
				HEX_write_ASM(HEX2, second1);
     868:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     86c:	e6ef3073 	uxtb	r3, r3
     870:	e3a00004 	mov	r0, #4
     874:	e1a01003 	mov	r1, r3
     878:	ebfffe90 	bl	2c0 <HEX_write_ASM>
				HEX_write_ASM(HEX3, second2);
     87c:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     880:	e6ef3073 	uxtb	r3, r3
     884:	e3a00008 	mov	r0, #8
     888:	e1a01003 	mov	r1, r3
     88c:	ebfffe8b 	bl	2c0 <HEX_write_ASM>
				HEX_write_ASM(HEX4, minute1);
     890:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     894:	e6ef3073 	uxtb	r3, r3
     898:	e3a00010 	mov	r0, #16
     89c:	e1a01003 	mov	r1, r3
     8a0:	ebfffe86 	bl	2c0 <HEX_write_ASM>
				HEX_write_ASM(HEX5, minute2);
     8a4:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     8a8:	e6ef3073 	uxtb	r3, r3
     8ac:	e3a00020 	mov	r0, #32
     8b0:	e1a01003 	mov	r1, r3
     8b4:	ebfffe81 	bl	2c0 <HEX_write_ASM>
			}
		}
	}
     8b8:	eaffff3b 	b	5ac <main+0x78>

000008bc <hps_tim0_int_flag>:
     8bc:	00000000 	.word	0x00000000

000008c0 <fpga_pb_key0_int_flag>:
     8c0:	00000000 	.word	0x00000000

000008c4 <fpga_pb_key1_int_flag>:
     8c4:	00000000 	.word	0x00000000

000008c8 <fpga_pb_key2_int_flag>:
     8c8:	00000000 	.word	0x00000000

000008cc <fpga_pb_key3_int_flag>:
     8cc:	00000000 	.word	0x00000000

000008d0 <A9_PRIV_TIM_ISR>:

fpga_pb_key3_int_flag:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     8d0:	e12fff1e 	bx	lr

000008d4 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     8d4:	e12fff1e 	bx	lr

000008d8 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     8d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	MOV R0, #0x1
     8dc:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM
     8e0:	ebfffee5 	bl	47c <HPS_TIM_clear_INT_ASM>
	
	LDR R0, =hps_tim0_int_flag
     8e4:	e59f0084 	ldr	r0, [pc, #132]	; 970 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     8e8:	e3a01001 	mov	r1, #1
	STR R1, [R0]
     8ec:	e5801000 	str	r1, [r0]
	
	POP {LR}
     8f0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     8f4:	e12fff1e 	bx	lr

000008f8 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     8f8:	e12fff1e 	bx	lr

000008fc <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     8fc:	e12fff1e 	bx	lr

00000900 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     900:	e12fff1e 	bx	lr

00000904 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     904:	e12fff1e 	bx	lr

00000908 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
    PUSH    {R3, LR}                
     908:	e92d4008 	push	{r3, lr}
    BL      read_PB_edgecap_ASM     // call read_PB_edgecap_ASM
     90c:	ebfffe9f 	bl	390 <read_PB_edgecap_ASM>
    MOV     R3, R0                  // save return value in R3
     910:	e1a03000 	mov	r3, r0
    BL      PB_clear_edgecap_ASM    // call PB_clear_edgecap_ASM to clear edgecap register
     914:	ebfffe9f 	bl	398 <PB_clear_edgecap_ASM>
                                   
    MOV     R1, #1                  
     918:	e3a01001 	mov	r1, #1
    TST     R3, #0x00000001         		
     91c:	e3130001 	tst	r3, #1
    LDRNE		R0, =fpga_pb_key0_int_flag 
     920:	159f004c 	ldrne	r0, [pc, #76]	; 974 <FPGA_PS2_DUAL_ISR+0x8>
    STRNE   	R1, [R0]                
     924:	15801000 	strne	r1, [r0]
    TST     R3, #0x00000002   
     928:	e3130002 	tst	r3, #2
    LDRNE   	R0, =fpga_pb_key1_int_flag
     92c:	159f0044 	ldrne	r0, [pc, #68]	; 978 <FPGA_PS2_DUAL_ISR+0xc>
    STRNE   	R1, [R0]
     930:	15801000 	strne	r1, [r0]
    TST     R3, #0x00000004   
     934:	e3130004 	tst	r3, #4
    LDRNE   	R0, =fpga_pb_key2_int_flag
     938:	159f003c 	ldrne	r0, [pc, #60]	; 97c <FPGA_PS2_DUAL_ISR+0x10>
    STRNE   	R1, [R0]
     93c:	15801000 	strne	r1, [r0]
    TST     R3, #0x00000008   
     940:	e3130008 	tst	r3, #8
    LDRNE   	R0, =fpga_pb_key3_int_flag
     944:	159f0034 	ldrne	r0, [pc, #52]	; 980 <FPGA_PS2_DUAL_ISR+0x14>
    STRNE   	R1, [R0]
     948:	15801000 	strne	r1, [r0]
    POP     {R3, LR}               
     94c:	e8bd4008 	pop	{r3, lr}
	BX      LR
     950:	e12fff1e 	bx	lr

00000954 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     954:	e12fff1e 	bx	lr

00000958 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     958:	e12fff1e 	bx	lr

0000095c <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     95c:	e12fff1e 	bx	lr

00000960 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     960:	e12fff1e 	bx	lr

00000964 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     964:	e12fff1e 	bx	lr

00000968 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     968:	e12fff1e 	bx	lr

0000096c <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     96c:	e12fff1e 	bx	lr
	PUSH {LR}

	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM
	
	LDR R0, =hps_tim0_int_flag
     970:	000008bc 	.word	0x000008bc
    MOV     R3, R0                  // save return value in R3
    BL      PB_clear_edgecap_ASM    // call PB_clear_edgecap_ASM to clear edgecap register
                                   
    MOV     R1, #1                  
    TST     R3, #0x00000001         		
    LDRNE		R0, =fpga_pb_key0_int_flag 
     974:	000008c0 	.word	0x000008c0
    STRNE   	R1, [R0]                
    TST     R3, #0x00000002   
    LDRNE   	R0, =fpga_pb_key1_int_flag
     978:	000008c4 	.word	0x000008c4
    STRNE   	R1, [R0]
    TST     R3, #0x00000004   
    LDRNE   	R0, =fpga_pb_key2_int_flag
     97c:	000008c8 	.word	0x000008c8
    STRNE   	R1, [R0]
    TST     R3, #0x00000008   
    LDRNE   	R0, =fpga_pb_key3_int_flag
     980:	000008cc 	.word	0x000008cc

00000984 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     984:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     988:	e28db000 	add	r11, sp, #0
     98c:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     990:	e3a030d3 	mov	r3, #211	; 0xd3
     994:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     998:	e51b3008 	ldr	r3, [r11, #-8]
     99c:	e129f003 	msr	CPSR_fc, r3
}
     9a0:	e28bd000 	add	sp, r11, #0
     9a4:	e8bd0800 	ldmfd	sp!, {r11}
     9a8:	e12fff1e 	bx	lr

000009ac <enable_A9_interrupts>:

void enable_A9_interrupts() {
     9ac:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     9b0:	e28db000 	add	r11, sp, #0
     9b4:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     9b8:	e3a03053 	mov	r3, #83	; 0x53
     9bc:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     9c0:	e51b3008 	ldr	r3, [r11, #-8]
     9c4:	e129f003 	msr	CPSR_fc, r3
}
     9c8:	e28bd000 	add	sp, r11, #0
     9cc:	e8bd0800 	ldmfd	sp!, {r11}
     9d0:	e12fff1e 	bx	lr

000009d4 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     9d4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     9d8:	e28db000 	add	r11, sp, #0
     9dc:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     9e0:	e3e03007 	mvn	r3, #7
     9e4:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     9e8:	e3a030d2 	mov	r3, #210	; 0xd2
     9ec:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     9f0:	e51b300c 	ldr	r3, [r11, #-12]
     9f4:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     9f8:	e51b3008 	ldr	r3, [r11, #-8]
     9fc:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     a00:	e3a030d3 	mov	r3, #211	; 0xd3
     a04:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     a08:	e51b300c 	ldr	r3, [r11, #-12]
     a0c:	e129f003 	msr	CPSR_fc, r3
}
     a10:	e28bd000 	add	sp, r11, #0
     a14:	e8bd0800 	ldmfd	sp!, {r11}
     a18:	e12fff1e 	bx	lr

00000a1c <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     a1c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a20:	e28db000 	add	r11, sp, #0
     a24:	e24dd01c 	sub	sp, sp, #28
     a28:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     a2c:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     a30:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     a34:	e1a031c3 	asr	r3, r3, #3
     a38:	e3c33003 	bic	r3, r3, #3
     a3c:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     a40:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     a44:	e203301f 	and	r3, r3, #31
     a48:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     a4c:	e3a02001 	mov	r2, #1
     a50:	e51b300c 	ldr	r3, [r11, #-12]
     a54:	e1a03312 	lsl	r3, r2, r3
     a58:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     a5c:	e51b3008 	ldr	r3, [r11, #-8]
     a60:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     a64:	e2433c03 	sub	r3, r3, #768	; 0x300
     a68:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     a6c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     a70:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     a74:	e5921000 	ldr	r1, [r2]
     a78:	e51b2010 	ldr	r2, [r11, #-16]
     a7c:	e1812002 	orr	r2, r1, r2
     a80:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     a84:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     a88:	e3c33003 	bic	r3, r3, #3
     a8c:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     a90:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     a94:	e2033003 	and	r3, r3, #3
     a98:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     a9c:	e51b2008 	ldr	r2, [r11, #-8]
     aa0:	e51b300c 	ldr	r3, [r11, #-12]
     aa4:	e0823003 	add	r3, r2, r3
     aa8:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     aac:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     ab0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     ab4:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     ab8:	e6ef2072 	uxtb	r2, r2
     abc:	e5c32000 	strb	r2, [r3]
}
     ac0:	e28bd000 	add	sp, r11, #0
     ac4:	e8bd0800 	ldmfd	sp!, {r11}
     ac8:	e12fff1e 	bx	lr

00000acc <config_GIC>:

void config_GIC(int len, int* IDs) {
     acc:	e92d4800 	push	{r11, lr}
     ad0:	e28db004 	add	r11, sp, #4
     ad4:	e24dd010 	sub	sp, sp, #16
     ad8:	e50b0010 	str	r0, [r11, #-16]
     adc:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     ae0:	e3a03000 	mov	r3, #0
     ae4:	e50b3008 	str	r3, [r11, #-8]
     ae8:	ea00000a 	b	b18 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     aec:	e51b3008 	ldr	r3, [r11, #-8]
     af0:	e1a03103 	lsl	r3, r3, #2
     af4:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     af8:	e0823003 	add	r3, r2, r3
     afc:	e5933000 	ldr	r3, [r3]
     b00:	e1a00003 	mov	r0, r3
     b04:	e3a01001 	mov	r1, #1
     b08:	ebffffc3 	bl	a1c <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     b0c:	e51b3008 	ldr	r3, [r11, #-8]
     b10:	e2833001 	add	r3, r3, #1
     b14:	e50b3008 	str	r3, [r11, #-8]
     b18:	e51b2008 	ldr	r2, [r11, #-8]
     b1c:	e51b3010 	ldr	r3, [r11, #-16]
     b20:	e1520003 	cmp	r2, r3
     b24:	bafffff0 	blt	aec <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     b28:	e30c3104 	movw	r3, #49412	; 0xc104
     b2c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     b30:	e30f2fff 	movw	r2, #65535	; 0xffff
     b34:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     b38:	e3a03cc1 	mov	r3, #49408	; 0xc100
     b3c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     b40:	e3a02001 	mov	r2, #1
     b44:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     b48:	e3a03a0d 	mov	r3, #53248	; 0xd000
     b4c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     b50:	e3a02001 	mov	r2, #1
     b54:	e5832000 	str	r2, [r3]
}
     b58:	e24bd004 	sub	sp, r11, #4
     b5c:	e8bd8800 	pop	{r11, pc}

00000b60 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     b60:	e24ee004 	sub	lr, lr, #4
     b64:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     b68:	e28db018 	add	r11, sp, #24
     b6c:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     b70:	e30c310c 	movw	r3, #49420	; 0xc10c
     b74:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     b78:	e5933000 	ldr	r3, [r3]
     b7c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     b80:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     b84:	e3530053 	cmp	r3, #83	; 0x53
     b88:	0a00003d 	beq	c84 <__cs3_isr_irq+0x124>
     b8c:	e3530053 	cmp	r3, #83	; 0x53
     b90:	ca000011 	bgt	bdc <__cs3_isr_irq+0x7c>
     b94:	e353004e 	cmp	r3, #78	; 0x4e
     b98:	0a000031 	beq	c64 <__cs3_isr_irq+0x104>
     b9c:	e353004e 	cmp	r3, #78	; 0x4e
     ba0:	ca000006 	bgt	bc0 <__cs3_isr_irq+0x60>
     ba4:	e3530048 	cmp	r3, #72	; 0x48
     ba8:	0a000029 	beq	c54 <__cs3_isr_irq+0xf4>
     bac:	e3530049 	cmp	r3, #73	; 0x49
     bb0:	0a000029 	beq	c5c <__cs3_isr_irq+0xfc>
     bb4:	e353001d 	cmp	r3, #29
     bb8:	0a000019 	beq	c24 <__cs3_isr_irq+0xc4>
     bbc:	ea000036 	b	c9c <__cs3_isr_irq+0x13c>
     bc0:	e3530050 	cmp	r3, #80	; 0x50
     bc4:	0a00002a 	beq	c74 <__cs3_isr_irq+0x114>
     bc8:	e3530050 	cmp	r3, #80	; 0x50
     bcc:	ba000026 	blt	c6c <__cs3_isr_irq+0x10c>
     bd0:	e3530051 	cmp	r3, #81	; 0x51
     bd4:	0a000028 	beq	c7c <__cs3_isr_irq+0x11c>
     bd8:	ea00002f 	b	c9c <__cs3_isr_irq+0x13c>
     bdc:	e35300c7 	cmp	r3, #199	; 0xc7
     be0:	0a000013 	beq	c34 <__cs3_isr_irq+0xd4>
     be4:	e35300c7 	cmp	r3, #199	; 0xc7
     be8:	ca000006 	bgt	c08 <__cs3_isr_irq+0xa8>
     bec:	e3530059 	cmp	r3, #89	; 0x59
     bf0:	0a000027 	beq	c94 <__cs3_isr_irq+0x134>
     bf4:	e35300c5 	cmp	r3, #197	; 0xc5
     bf8:	0a00000b 	beq	c2c <__cs3_isr_irq+0xcc>
     bfc:	e3530054 	cmp	r3, #84	; 0x54
     c00:	0a000021 	beq	c8c <__cs3_isr_irq+0x12c>
     c04:	ea000024 	b	c9c <__cs3_isr_irq+0x13c>
     c08:	e35300c9 	cmp	r3, #201	; 0xc9
     c0c:	0a00000c 	beq	c44 <__cs3_isr_irq+0xe4>
     c10:	e35300c9 	cmp	r3, #201	; 0xc9
     c14:	ba000008 	blt	c3c <__cs3_isr_irq+0xdc>
     c18:	e35300ca 	cmp	r3, #202	; 0xca
     c1c:	0a00000a 	beq	c4c <__cs3_isr_irq+0xec>
     c20:	ea00001d 	b	c9c <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     c24:	ebffff29 	bl	8d0 <A9_PRIV_TIM_ISR>
     c28:	ea00001c 	b	ca0 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     c2c:	ebffff28 	bl	8d4 <HPS_GPIO1_ISR>
     c30:	ea00001a 	b	ca0 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     c34:	ebffff27 	bl	8d8 <HPS_TIM0_ISR>
     c38:	ea000018 	b	ca0 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     c3c:	ebffff2d 	bl	8f8 <HPS_TIM1_ISR>
     c40:	ea000016 	b	ca0 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     c44:	ebffff2c 	bl	8fc <HPS_TIM2_ISR>
     c48:	ea000014 	b	ca0 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     c4c:	ebffff2b 	bl	900 <HPS_TIM3_ISR>
     c50:	ea000012 	b	ca0 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     c54:	ebffff2a 	bl	904 <FPGA_INTERVAL_TIM_ISR>
     c58:	ea000010 	b	ca0 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     c5c:	ebffff29 	bl	908 <FPGA_PB_KEYS_ISR>
     c60:	ea00000e 	b	ca0 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     c64:	ebffff3a 	bl	954 <FPGA_Audio_ISR>
     c68:	ea00000c 	b	ca0 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     c6c:	ebffff39 	bl	958 <FPGA_PS2_ISR>
     c70:	ea00000a 	b	ca0 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     c74:	ebffff38 	bl	95c <FPGA_JTAG_ISR>
     c78:	ea000008 	b	ca0 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     c7c:	ebffff37 	bl	960 <FPGA_IrDA_ISR>
     c80:	ea000006 	b	ca0 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     c84:	ebffff36 	bl	964 <FPGA_JP1_ISR>
     c88:	ea000004 	b	ca0 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     c8c:	ebffff35 	bl	968 <FPGA_JP2_ISR>
     c90:	ea000002 	b	ca0 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     c94:	ebffff34 	bl	96c <FPGA_PS2_DUAL_ISR>
     c98:	ea000000 	b	ca0 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     c9c:	eafffffe 	b	c9c <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     ca0:	e30c3110 	movw	r3, #49424	; 0xc110
     ca4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     ca8:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     cac:	e5832000 	str	r2, [r3]
}
     cb0:	e24bd018 	sub	sp, r11, #24
     cb4:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000cb8 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     cb8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     cbc:	e28db000 	add	r11, sp, #0
	while(1);
     cc0:	eafffffe 	b	cc0 <__cs3_reset+0x8>

00000cc4 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     cc4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     cc8:	e28db000 	add	r11, sp, #0
	while(1);
     ccc:	eafffffe 	b	ccc <__cs3_isr_undef+0x8>

00000cd0 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     cd0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     cd4:	e28db000 	add	r11, sp, #0
	while(1);
     cd8:	eafffffe 	b	cd8 <__cs3_isr_swi+0x8>

00000cdc <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     cdc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ce0:	e28db000 	add	r11, sp, #0
	while(1);
     ce4:	eafffffe 	b	ce4 <__cs3_isr_pabort+0x8>

00000ce8 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     ce8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     cec:	e28db000 	add	r11, sp, #0
	while(1);
     cf0:	eafffffe 	b	cf0 <__cs3_isr_dabort+0x8>

00000cf4 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     cf4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     cf8:	e28db000 	add	r11, sp, #0
	while(1);
     cfc:	eafffffe 	b	cfc <__cs3_isr_fiq+0x8>

00000d00 <fix_bug>:
}

void fix_bug() {
     d00:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d04:	e28db000 	add	r11, sp, #0
     d08:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     d0c:	e30d3198 	movw	r3, #53656	; 0xd198
     d10:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d14:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     d18:	e51b3008 	ldr	r3, [r11, #-8]
     d1c:	e3a02703 	mov	r2, #786432	; 0xc0000
     d20:	e5832000 	str	r2, [r3]
}
     d24:	e28bd000 	add	sp, r11, #0
     d28:	e8bd0800 	ldmfd	sp!, {r11}
     d2c:	e12fff1e 	bx	lr

00000d30 <int_setup>:

void int_setup(int len, int* IDs) {
     d30:	e92d4800 	push	{r11, lr}
     d34:	e28db004 	add	r11, sp, #4
     d38:	e24dd008 	sub	sp, sp, #8
     d3c:	e50b0008 	str	r0, [r11, #-8]
     d40:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     d44:	ebffff0e 	bl	984 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     d48:	ebffff21 	bl	9d4 <set_A9_IRQ_stack>
	fix_bug();
     d4c:	ebffffeb 	bl	d00 <fix_bug>
	config_GIC(len, IDs);
     d50:	e51b0008 	ldr	r0, [r11, #-8]
     d54:	e51b100c 	ldr	r1, [r11, #-12]
     d58:	ebffff5b 	bl	acc <config_GIC>
	enable_A9_interrupts();
     d5c:	ebffff12 	bl	9ac <enable_A9_interrupts>
     d60:	e24bd004 	sub	sp, r11, #4
     d64:	e8bd8800 	pop	{r11, pc}

00000d68 <atexit>:
     d68:	e1a01000 	mov	r1, r0
     d6c:	e3a00000 	mov	r0, #0
     d70:	e92d4008 	push	{r3, lr}
     d74:	e1a02000 	mov	r2, r0
     d78:	e1a03000 	mov	r3, r0
     d7c:	eb00000e 	bl	dbc <__register_exitproc>
     d80:	e8bd4008 	pop	{r3, lr}
     d84:	e12fff1e 	bx	lr

00000d88 <exit>:
     d88:	e92d4008 	push	{r3, lr}
     d8c:	e3a01000 	mov	r1, #0
     d90:	e1a04000 	mov	r4, r0
     d94:	eb000045 	bl	eb0 <__call_exitprocs>
     d98:	e59f3018 	ldr	r3, [pc, #24]	; db8 <exit+0x30>
     d9c:	e5930000 	ldr	r0, [r3]
     da0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     da4:	e3530000 	cmp	r3, #0
     da8:	11a0e00f 	movne	lr, pc
     dac:	112fff13 	bxne	r3
     db0:	e1a00004 	mov	r0, r4
     db4:	eb0000c9 	bl	10e0 <_exit>
     db8:	00001190 	.word	0x00001190

00000dbc <__register_exitproc>:
     dbc:	e59fc0e4 	ldr	r12, [pc, #228]	; ea8 <__register_exitproc+0xec>
     dc0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     dc4:	e59c4000 	ldr	r4, [r12]
     dc8:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     dcc:	e35c0000 	cmp	r12, #0
     dd0:	0284cf53 	addeq	r12, r4, #332	; 0x14c
     dd4:	e59c5004 	ldr	r5, [r12, #4]
     dd8:	0584c148 	streq	r12, [r4, #328]	; 0x148
     ddc:	e355001f 	cmp	r5, #31
     de0:	e24dd010 	sub	sp, sp, #16
     de4:	e1a06000 	mov	r6, r0
     de8:	da000015 	ble	e44 <__register_exitproc+0x88>
     dec:	e59f00b8 	ldr	r0, [pc, #184]	; eac <__register_exitproc+0xf0>
     df0:	e3500000 	cmp	r0, #0
     df4:	1a000001 	bne	e00 <__register_exitproc+0x44>
     df8:	e3e00000 	mvn	r0, #0
     dfc:	ea000018 	b	e64 <__register_exitproc+0xa8>
     e00:	e3a00e19 	mov	r0, #400	; 0x190
     e04:	e58d100c 	str	r1, [sp, #12]
     e08:	e58d2008 	str	r2, [sp, #8]
     e0c:	e58d3004 	str	r3, [sp, #4]
     e10:	e320f000 	nop	{0}
     e14:	e250c000 	subs	r12, r0, #0
     e18:	e59d100c 	ldr	r1, [sp, #12]
     e1c:	e59d2008 	ldr	r2, [sp, #8]
     e20:	e59d3004 	ldr	r3, [sp, #4]
     e24:	0afffff3 	beq	df8 <__register_exitproc+0x3c>
     e28:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     e2c:	e3a00000 	mov	r0, #0
     e30:	e58c0004 	str	r0, [r12, #4]
     e34:	e58c5000 	str	r5, [r12]
     e38:	e584c148 	str	r12, [r4, #328]	; 0x148
     e3c:	e58c0188 	str	r0, [r12, #392]	; 0x188
     e40:	e58c018c 	str	r0, [r12, #396]	; 0x18c
     e44:	e3560000 	cmp	r6, #0
     e48:	e59c4004 	ldr	r4, [r12, #4]
     e4c:	1a000007 	bne	e70 <__register_exitproc+0xb4>
     e50:	e2843002 	add	r3, r4, #2
     e54:	e2844001 	add	r4, r4, #1
     e58:	e78c1103 	str	r1, [r12, r3, lsl #2]
     e5c:	e58c4004 	str	r4, [r12, #4]
     e60:	e3a00000 	mov	r0, #0
     e64:	e28dd010 	add	sp, sp, #16
     e68:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     e6c:	e12fff1e 	bx	lr
     e70:	e3a00001 	mov	r0, #1
     e74:	e1a00410 	lsl	r0, r0, r4
     e78:	e08c8104 	add	r8, r12, r4, lsl #2
     e7c:	e3560002 	cmp	r6, #2
     e80:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
     e84:	e5883108 	str	r3, [r8, #264]	; 0x108
     e88:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
     e8c:	e1877000 	orr	r7, r7, r0
     e90:	01830000 	orreq	r0, r3, r0
     e94:	e1a05008 	mov	r5, r8
     e98:	e5882088 	str	r2, [r8, #136]	; 0x88
     e9c:	e58c7188 	str	r7, [r12, #392]	; 0x188
     ea0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
     ea4:	eaffffe9 	b	e50 <__register_exitproc+0x94>
     ea8:	00001190 	.word	0x00001190
     eac:	00000000 	.word	0x00000000

00000eb0 <__call_exitprocs>:
     eb0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     eb4:	e59f3168 	ldr	r3, [pc, #360]	; 1024 <__call_exitprocs+0x174>
     eb8:	e5933000 	ldr	r3, [r3]
     ebc:	e24dd014 	sub	sp, sp, #20
     ec0:	e58d3004 	str	r3, [sp, #4]
     ec4:	e2833f52 	add	r3, r3, #328	; 0x148
     ec8:	e58d0008 	str	r0, [sp, #8]
     ecc:	e58d300c 	str	r3, [sp, #12]
     ed0:	e1a07001 	mov	r7, r1
     ed4:	e3a08001 	mov	r8, #1
     ed8:	e59d3004 	ldr	r3, [sp, #4]
     edc:	e5936148 	ldr	r6, [r3, #328]	; 0x148
     ee0:	e3560000 	cmp	r6, #0
     ee4:	e59db00c 	ldr	r11, [sp, #12]
     ee8:	0a000033 	beq	fbc <__call_exitprocs+0x10c>
     eec:	e5965004 	ldr	r5, [r6, #4]
     ef0:	e2554001 	subs	r4, r5, #1
     ef4:	5286a088 	addpl	r10, r6, #136	; 0x88
     ef8:	5285501f 	addpl	r5, r5, #31
     efc:	508a5105 	addpl	r5, r10, r5, lsl #2
     f00:	5a000007 	bpl	f24 <__call_exitprocs+0x74>
     f04:	ea000029 	b	fb0 <__call_exitprocs+0x100>
     f08:	e5953000 	ldr	r3, [r5]
     f0c:	e1530007 	cmp	r3, r7
     f10:	0a000005 	beq	f2c <__call_exitprocs+0x7c>
     f14:	e2444001 	sub	r4, r4, #1
     f18:	e3740001 	cmn	r4, #1
     f1c:	e2455004 	sub	r5, r5, #4
     f20:	0a000022 	beq	fb0 <__call_exitprocs+0x100>
     f24:	e3570000 	cmp	r7, #0
     f28:	1afffff6 	bne	f08 <__call_exitprocs+0x58>
     f2c:	e5963004 	ldr	r3, [r6, #4]
     f30:	e06a2005 	rsb	r2, r10, r5
     f34:	e2433001 	sub	r3, r3, #1
     f38:	e0862002 	add	r2, r6, r2
     f3c:	e1530004 	cmp	r3, r4
     f40:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
     f44:	13a01000 	movne	r1, #0
     f48:	05864004 	streq	r4, [r6, #4]
     f4c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
     f50:	e3530000 	cmp	r3, #0
     f54:	0affffee 	beq	f14 <__call_exitprocs+0x64>
     f58:	e1a02418 	lsl	r2, r8, r4
     f5c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
     f60:	e1120001 	tst	r2, r1
     f64:	e5969004 	ldr	r9, [r6, #4]
     f68:	0a000016 	beq	fc8 <__call_exitprocs+0x118>
     f6c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
     f70:	e1120001 	tst	r2, r1
     f74:	1a000016 	bne	fd4 <__call_exitprocs+0x124>
     f78:	e59d0008 	ldr	r0, [sp, #8]
     f7c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
     f80:	e1a0e00f 	mov	lr, pc
     f84:	e12fff13 	bx	r3
     f88:	e5963004 	ldr	r3, [r6, #4]
     f8c:	e1530009 	cmp	r3, r9
     f90:	1affffd0 	bne	ed8 <__call_exitprocs+0x28>
     f94:	e59b3000 	ldr	r3, [r11]
     f98:	e1530006 	cmp	r3, r6
     f9c:	1affffcd 	bne	ed8 <__call_exitprocs+0x28>
     fa0:	e2444001 	sub	r4, r4, #1
     fa4:	e3740001 	cmn	r4, #1
     fa8:	e2455004 	sub	r5, r5, #4
     fac:	1affffdc 	bne	f24 <__call_exitprocs+0x74>
     fb0:	e59f1070 	ldr	r1, [pc, #112]	; 1028 <__call_exitprocs+0x178>
     fb4:	e3510000 	cmp	r1, #0
     fb8:	1a000009 	bne	fe4 <__call_exitprocs+0x134>
     fbc:	e28dd014 	add	sp, sp, #20
     fc0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     fc4:	e12fff1e 	bx	lr
     fc8:	e1a0e00f 	mov	lr, pc
     fcc:	e12fff13 	bx	r3
     fd0:	eaffffec 	b	f88 <__call_exitprocs+0xd8>
     fd4:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
     fd8:	e1a0e00f 	mov	lr, pc
     fdc:	e12fff13 	bx	r3
     fe0:	eaffffe8 	b	f88 <__call_exitprocs+0xd8>
     fe4:	e5963004 	ldr	r3, [r6, #4]
     fe8:	e3530000 	cmp	r3, #0
     fec:	e5963000 	ldr	r3, [r6]
     ff0:	1a000008 	bne	1018 <__call_exitprocs+0x168>
     ff4:	e3530000 	cmp	r3, #0
     ff8:	0a000006 	beq	1018 <__call_exitprocs+0x168>
     ffc:	e1a00006 	mov	r0, r6
    1000:	e58b3000 	str	r3, [r11]
    1004:	e320f000 	nop	{0}
    1008:	e59b6000 	ldr	r6, [r11]
    100c:	e3560000 	cmp	r6, #0
    1010:	1affffb5 	bne	eec <__call_exitprocs+0x3c>
    1014:	eaffffe8 	b	fbc <__call_exitprocs+0x10c>
    1018:	e1a0b006 	mov	r11, r6
    101c:	e1a06003 	mov	r6, r3
    1020:	eafffff9 	b	100c <__call_exitprocs+0x15c>
    1024:	00001190 	.word	0x00001190
    1028:	00000000 	.word	0x00000000

0000102c <register_fini>:
    102c:	e92d4008 	push	{r3, lr}
    1030:	e59f3010 	ldr	r3, [pc, #16]	; 1048 <register_fini+0x1c>
    1034:	e3530000 	cmp	r3, #0
    1038:	159f000c 	ldrne	r0, [pc, #12]	; 104c <register_fini+0x20>
    103c:	1bffff49 	blne	d68 <atexit>
    1040:	e8bd4008 	pop	{r3, lr}
    1044:	e12fff1e 	bx	lr
    1048:	000011b8 	.word	0x000011b8
    104c:	00001050 	.word	0x00001050

00001050 <__libc_fini_array>:
    1050:	e92d4038 	push	{r3, r4, r5, lr}
    1054:	e59f5030 	ldr	r5, [pc, #48]	; 108c <__libc_fini_array+0x3c>
    1058:	e59f4030 	ldr	r4, [pc, #48]	; 1090 <__libc_fini_array+0x40>
    105c:	e0654004 	rsb	r4, r5, r4
    1060:	e1b04144 	asrs	r4, r4, #2
    1064:	10855104 	addne	r5, r5, r4, lsl #2
    1068:	0a000004 	beq	1080 <__libc_fini_array+0x30>
    106c:	e5353004 	ldr	r3, [r5, #-4]!
    1070:	e1a0e00f 	mov	lr, pc
    1074:	e12fff13 	bx	r3
    1078:	e2544001 	subs	r4, r4, #1
    107c:	1afffffa 	bne	106c <__libc_fini_array+0x1c>
    1080:	eb00004c 	bl	11b8 <__libc_fini>
    1084:	e8bd4038 	pop	{r3, r4, r5, lr}
    1088:	e12fff1e 	bx	lr
    108c:	000011d0 	.word	0x000011d0
    1090:	000011d4 	.word	0x000011d4

00001094 <__cs3_premain>:
    1094:	e92d4008 	push	{r3, lr}
    1098:	eb000017 	bl	10fc <__libc_init_array>
    109c:	e59f3030 	ldr	r3, [pc, #48]	; 10d4 <__cs3_premain+0x40>
    10a0:	e3530000 	cmp	r3, #0
    10a4:	15930000 	ldrne	r0, [r3]
    10a8:	01a00003 	moveq	r0, r3
    10ac:	e59f3024 	ldr	r3, [pc, #36]	; 10d8 <__cs3_premain+0x44>
    10b0:	e3530000 	cmp	r3, #0
    10b4:	15931000 	ldrne	r1, [r3]
    10b8:	01a01003 	moveq	r1, r3
    10bc:	e3a02000 	mov	r2, #0
    10c0:	ebfffd1b 	bl	534 <main>
    10c4:	e59f3010 	ldr	r3, [pc, #16]	; 10dc <__cs3_premain+0x48>
    10c8:	e3530000 	cmp	r3, #0
    10cc:	1bffff2d 	blne	d88 <exit>
    10d0:	eafffffe 	b	10d0 <__cs3_premain+0x3c>
	...
    10dc:	00000d88 	.word	0x00000d88

000010e0 <_exit>:
    10e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    10e4:	e3a00018 	mov	r0, #24
    10e8:	e59f1004 	ldr	r1, [pc, #4]	; 10f4 <_exit+0x14>
    10ec:	ef123456 	svc	0x00123456
    10f0:	eafffffe 	b	10f0 <_exit+0x10>
    10f4:	00020026 	.word	0x00020026

000010f8 <__cs3_isr_interrupt>:
    10f8:	eafffffe 	b	10f8 <__cs3_isr_interrupt>

000010fc <__libc_init_array>:
    10fc:	e92d4070 	push	{r4, r5, r6, lr}
    1100:	e59f506c 	ldr	r5, [pc, #108]	; 1174 <__libc_init_array+0x78>
    1104:	e59f606c 	ldr	r6, [pc, #108]	; 1178 <__libc_init_array+0x7c>
    1108:	e0656006 	rsb	r6, r5, r6
    110c:	e1b06146 	asrs	r6, r6, #2
    1110:	12455004 	subne	r5, r5, #4
    1114:	13a04000 	movne	r4, #0
    1118:	0a000005 	beq	1134 <__libc_init_array+0x38>
    111c:	e5b53004 	ldr	r3, [r5, #4]!
    1120:	e2844001 	add	r4, r4, #1
    1124:	e1a0e00f 	mov	lr, pc
    1128:	e12fff13 	bx	r3
    112c:	e1560004 	cmp	r6, r4
    1130:	1afffff9 	bne	111c <__libc_init_array+0x20>
    1134:	e59f5040 	ldr	r5, [pc, #64]	; 117c <__libc_init_array+0x80>
    1138:	e59f6040 	ldr	r6, [pc, #64]	; 1180 <__libc_init_array+0x84>
    113c:	e0656006 	rsb	r6, r5, r6
    1140:	eb000014 	bl	1198 <_init>
    1144:	e1b06146 	asrs	r6, r6, #2
    1148:	12455004 	subne	r5, r5, #4
    114c:	13a04000 	movne	r4, #0
    1150:	0a000005 	beq	116c <__libc_init_array+0x70>
    1154:	e5b53004 	ldr	r3, [r5, #4]!
    1158:	e2844001 	add	r4, r4, #1
    115c:	e1a0e00f 	mov	lr, pc
    1160:	e12fff13 	bx	r3
    1164:	e1560004 	cmp	r6, r4
    1168:	1afffff9 	bne	1154 <__libc_init_array+0x58>
    116c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1170:	e12fff1e 	bx	lr
    1174:	000011b0 	.word	0x000011b0
    1178:	000011b0 	.word	0x000011b0
    117c:	000011b0 	.word	0x000011b0
    1180:	000011b8 	.word	0x000011b8

Disassembly of section .rodata:

00001188 <_global_impure_ptr-0x8>:
    1188:	00000049 	.word	0x00000049
    118c:	000000c7 	.word	0x000000c7

00001190 <_global_impure_ptr>:
    1190:	000011f8 00000043                       ....C...

00001198 <_init>:
    1198:	e1a0c00d 	mov	r12, sp
    119c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    11a0:	e24cb004 	sub	r11, r12, #4
    11a4:	e24bd028 	sub	sp, r11, #40	; 0x28
    11a8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    11ac:	e12fff1e 	bx	lr

000011b0 <__init_array_start>:
    11b0:	0000102c 	.word	0x0000102c

000011b4 <__frame_dummy_init_array_entry>:
    11b4:	00000208                                ....

000011b8 <__libc_fini>:
    11b8:	e1a0c00d 	mov	r12, sp
    11bc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    11c0:	e24cb004 	sub	r11, r12, #4
    11c4:	e24bd028 	sub	sp, r11, #40	; 0x28
    11c8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    11cc:	e12fff1e 	bx	lr

000011d0 <__fini_array_start>:
    11d0:	000001c4 	.word	0x000001c4

000011d4 <__cs3_regions>:
    11d4:	00000000 	.word	0x00000000
    11d8:	00000040 	.word	0x00000040
    11dc:	00000040 	.word	0x00000040
    11e0:	000015e8 	.word	0x000015e8
    11e4:	00000020 	.word	0x00000020
